# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Select relevant columns
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -readmitted)  # Ensure proper selection
dummy_model <- dummyVars(" ~ .", data = data)
data <- predict(dummy_model, newdata = data) %>% as.data.frame()
# Restore the target variable
data$readmitted <- target
data$readmitted <- as.factor(data$readmitted)  # Ensure it's a factor
# Restore the target variable
data$readmitted <- target
# Ensure readmitted is still a factor
data$readmitted <- as.factor(data$readmitted)
# Split into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$readmitted, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(readmitted ~ ., data = trainData, family = binomial)
# Model summary
summary(model)
# Predictions on test data
testData$predicted <- predict(model, newdata = testData, type = "response")
testData$predicted_class <- ifelse(testData$predicted > 0.5, 1, 0)
# Model evaluation
conf_matrix <- table(testData$readmitted, testData$predicted_class)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Model Accuracy:", round(accuracy, 4)))
# Recommendations
cat("\nRecommendations:")
if (summary(model)$coefficients["Waiting Time", "Pr(>|z|)"] < 0.05) {
cat("\n- Reduce waiting time to decrease readmission rates.")
}
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Select relevant columns
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -readmitted)  # Ensure proper selection
dummy_model <- dummyVars(" ~ .", data = data)
data <- predict(dummy_model, newdata = data) %>% as.data.frame()
# Restore the target variable
data$readmitted <- target
data$readmitted <- as.factor(data$readmitted)  # Ensure it's a factor
# Restore the target variable
data$readmitted <- target
# Ensure readmitted is still a factor
data$readmitted <- as.factor(data$readmitted)
# Split into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$readmitted, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(readmitted ~ ., data = trainData, family = binomial)
# Model summary
summary(model)
# Predictions on test data
testData$predicted <- predict(model, newdata = testData, type = "response")
testData$predicted_class <- ifelse(testData$predicted > 0.5, 1, 0)
# Model evaluation
conf_matrix <- table(testData$readmitted, testData$predicted_class)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Model Accuracy:", round(accuracy, 4)*100))
# Recommendations
cat("\nRecommendations:")
if (summary(model)$coefficients["Waiting Time", "Pr(>|z|)"] < 0.05) {
cat("\n- Reduce waiting time to decrease readmission rates.")
}
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Select relevant columns
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -readmitted)  # Ensure proper selection
dummy_model <- dummyVars(" ~ .", data = data)
data <- predict(dummy_model, newdata = data) %>% as.data.frame()
# Restore the target variable
data$readmitted <- target
data$readmitted <- as.factor(data$readmitted)  # Ensure it's a factor
# Restore the target variable
data$readmitted <- target
# Ensure readmitted is still a factor
data$readmitted <- as.factor(data$readmitted)
# Split into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$readmitted, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(readmitted ~ ., data = trainData, family = binomial)
# Model summary
summary(model)
# Predictions on test data
testData$predicted <- predict(model, newdata = testData, type = "response")
testData$predicted_class <- ifelse(testData$predicted > 0.5, 1, 0)
# Model evaluation
conf_matrix <- table(testData$readmitted, testData$predicted_class)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Model Accuracy:", round(accuracy, 4)*100))
# Recommendations
cat("\nRecommendations:")
if ("Waiting Time" %in% rownames(summary(model)$coefficients)) {
if (summary(model)$coefficients["Waiting Time", "Pr(>|z|)"] < 0.05) {
cat("\n- Reduce waiting time to decrease readmission rates.")
}
}
if ("glucose_test" %in% rownames(summary(model)$coefficients)) {
if (summary(model)$coefficients["glucose_test", "Pr(>|z|)"] < 0.05) {
cat("\n- Monitor glucose levels closely for better patient outcomes.")
}
}
names(data)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Select relevant columns
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -readmitted)  # Ensure proper selection
dummy_model <- dummyVars(" ~ .", data = data)
data <- predict(dummy_model, newdata = data) %>% as.data.frame()
# Restore the target variable
data$readmitted <- target
data$readmitted <- as.factor(data$readmitted)  # Ensure it's a factor
# Restore the target variable
data$readmitted <- target
# Ensure readmitted is still a factor
data$readmitted <- as.factor(data$readmitted)
# Split into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$readmitted, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(readmitted ~ ., data = trainData, family = binomial)
# Model summary
summary(model)
# Predictions on test data
testData$predicted <- predict(model, newdata = testData, type = "response")
testData$predicted_class <- ifelse(testData$predicted > 0.5, 1, 0)
# Model evaluation
conf_matrix <- table(testData$readmitted, testData$predicted_class)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Model Accuracy:", round(accuracy, 4)*100))
# Recommendations
cat("\nRecommendations:")
if ("Waiting Time" %in% rownames(summary(model)$coefficients)) {
if (summary(model)$coefficients["Waiting Time", "Pr(>|z|)"] < 0.05) {
cat("\n- Reduce waiting time to decrease readmission rates.")
}
}
if ("glucose_test" %in% rownames(summary(model)$coefficients)) {
if (summary(model)$coefficients["glucose_test", "Pr(>|z|)"] < 0.05) {
cat("\n- Monitor glucose levels closely for better patient outcomes.")
}
}
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Select relevant columns
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -readmitted)  # Ensure proper selection
dummy_model <- dummyVars(" ~ .", data = data)
data <- predict(dummy_model, newdata = data) %>% as.data.frame()
# Restore the target variable
data$readmitted <- target
data$readmitted <- as.factor(data$readmitted)  # Ensure it's a factor
# Restore the target variable
data$readmitted <- target
# Ensure readmitted is still a factor
data$readmitted <- as.factor(data$readmitted)
# Split into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$readmitted, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(readmitted ~ ., data = trainData, family = binomial)
# Model summary
summary(model)
# Predictions on test data
testData$predicted <- predict(model, newdata = testData, type = "response")
testData$predicted_class <- ifelse(testData$predicted > 0.5, 1, 0)
# Model evaluation
conf_matrix <- table(testData$readmitted, testData$predicted_class)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Model Accuracy:", round(accuracy, 4)*100))
# Recommendations
cat("\nRecommendations:")
if ("Waiting Time" %in% rownames(summary(model)$coefficients)) {
if (summary(model)$coefficients["Waiting Time", "Pr(>|z|)"] < 0.05) {
cat("\n- Reduce waiting time to decrease readmission rates.")
}
}
if ("glucose_test" %in% rownames(summary(model)$coefficients)) {
if (summary(model)$coefficients["glucose_test", "Pr(>|z|)"] < 0.05) {
cat("\n- Monitor glucose levels closely for better patient outcomes.")
}
}
# Print available coefficient names to check transformations
print(rownames(summary(model)$coefficients))
# Recommendations
cat("\nRecommendations:")
# Identify transformed column names
waiting_time_col <- grep("Waiting Time", rownames(summary(model)$coefficients), value = TRUE)
glucose_test_col <- grep("glucose_test", rownames(summary(model)$coefficients), value = TRUE)
# Check if 'Waiting Time' variable is significant
if (length(waiting_time_col) > 0 && summary(model)$coefficients[waiting_time_col, "Pr(>|z|)"] < 0.05) {
cat("\n- Reduce waiting time to decrease readmission rates.")
}
# Check if 'glucose_test' variable is significant
if (length(glucose_test_col) > 0 && summary(model)$coefficients[glucose_test_col, "Pr(>|z|)"] < 0.05) {
cat("\n- Monitor glucose levels closely for better patient outcomes.")
}
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
install.packages(xgboost)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
install.packages("xgboost")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
data <- read_excel("Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Remove highly correlated or insignificant variables
data <- data %>% select(-`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
data <- read_excel("Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Remove highly correlated or insignificant variables
data <- data %>% select(-`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Remove highly correlated or insignificant variables
data <- data %>% select(-`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Remove highly correlated or insignificant variables
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Convert categorical variables using one-hot encoding
data <- dummyVars(" ~ .", data = data) %>% predict(newdata = data) %>% as.data.frame()
# Split into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$readmitted, p = 0.7, list = FALSE)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Remove highly correlated or insignificant variables
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Convert categorical variables using one-hot encoding
data <- dummyVars(" ~ .", data = data) %>% predict(newdata = data) %>% as.data.frame()
# Split into training and testing sets
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -readmitted)  # Ensure proper selection
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Remove highly correlated or insignificant variables
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Convert categorical variables using one-hot encoding
data <- dummyVars(" ~ .", data = data) %>% predict(newdata = data) %>% as.data.frame()
# Split into training and testing sets
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -`readmitted`)  # Ensure proper selection
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
data$age <- as.factor(data$age)
data$`Length of Stay` <- as.factor(data$`Length of Stay`)
data$medical_specialty <- as.factor(data$medical_specialty)
data$`Ward Name` <- as.factor(data$`Ward Name`)
data$`Time Visited Hospital` <- as.factor(data$`Time Visited Hospital`)
data$readmitted <- as.factor(data$readmitted)
# Remove highly correlated or insignificant variables
data <- dplyr::select(data, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Convert categorical variables using one-hot encoding
data <- dummyVars(" ~ .", data = data) %>% predict(newdata = data) %>% as.data.frame()
# Split into training and testing sets
# Store the target variable before encoding
target <- data$readmitted
# Store the target variable before encoding
target <- data$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
data <- dplyr::select(data, -`readmitted`)
names(data)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(xgboost)
library(Matrix)
# Load dataset
d <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
# Convert categorical variables to factors
d$age <- as.factor(d$age)
d$`Length of Stay` <- as.factor(d$`Length of Stay`)
d$medical_specialty <- as.factor(d$medical_specialty)
d$`Ward Name` <- as.factor(d$`Ward Name`)
d$`Time Visited Hospital` <- as.factor(d$`Time Visited Hospital`)
d$readmitted <- as.factor(d$readmitted)
# Remove highly correlated or insignificant variables
d <- dplyr::select(d, -`Patient ID`, -`Nurses Attending`, -`Doctors Attending`)
# Convert categorical variables using one-hot encoding
d <- dummyVars(" ~ .", d = d) %>% predict(newdata = d) %>% as.data.frame()
# Split into training and testing sets
# Store the target variable before encoding
target <- d$readmitted
# Store the target variable before encoding
target <- d$readmitted
# Convert categorical variables using one-hot encoding (excluding readmitted)
d <- dplyr::select(d, -`readmitted`)
names(d)
# Load necessary libraries
library(readxl)
library(caret)
library(dplyr)
library(ggplot2)
# Load dataset
data <- read_excel("C:/Users/Gauri Vijay Nagre/Desktop/Sem_2/BA/BA_Lifeline_Hospital_Dashboard/Hospital Dataset3.xlsx", sheet = "Sheet1")
t_test_result <- t.test(`Waiting Time` ~ readmitted, data = dataset)
